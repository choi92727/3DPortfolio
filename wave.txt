#pragma once

namespace Landscape
{
	class WaveVertex
	{
	public:
		friend class Wave;

	public:
		WaveVertex(UINT m , UINT n , float dx, float dt, float speed, float damping);
		~WaveVertex();

		void Update();
		void Disturb(UINT x, UINT y, float magnitude);

	private:
		float t;

		float k[3];
		float timeStep;
		float spatialStep;
			  
		UINT  rowCount;
		UINT  colCount;
		UINT  vertexCount;
		UINT  triangleCount;

		vector<WaterVertexType> prev;
		vector<WaterVertexType> current;
		vector<D3DXVECTOR3> tangents;
	};


	class Wave
	{
	public:
		Wave(ExecuteValues* values);
		~Wave();

		void Update();
		void Render();

		void PostRender();

	private:
		void Clear();

		void FillVertices();
		void CreateBuffer();

	private:
		ExecuteValues* values;
		Material* material;
		WaveVertex* vertexData;

		WorldBuffer* worldBuffer;

		vector<WaterVertexType> vertices;
		vector<UINT> indices;
		ID3D11Buffer* vertexBuffer, *indexBuffer;

		ID3D11RasterizerState* rasterizer[2];

		D3DXVECTOR3 position;
		D3DXMATRIX world;

		UINT width, height;

		float theta;
		float phi;
		float radius;
		float time;
	};



//////////////////////////////////////

#include "stdafx.h"
#include "Wave.h"

#include "Data.h"

Landscape::WaveVertex::WaveVertex(UINT m, UINT n, float dx, float dt, float speed, float damping)
{
	rowCount = m;
	colCount = n;
	vertexCount = m * n;
	triangleCount = (m - 1) * (n - 1) * 2;

	timeStep = dt;
	spatialStep = dx;

	t = 0.0f;

	float d = damping + 2.0f;
	float e = (speed * speed) * (dt * dt) / (dx * dx);

	k[0] = (damping * dt - 2.0f) / d;
	k[1] = (4.0f - 8.0f * e) / d;
	k[2] = (2.0f * e) / d;

	prev.assign(m*n, WaterVertexType());
	current.assign(m * n, WaterVertexType());

	tangents.assign(m * n, D3DXVECTOR3());

	float w2 = (n - 1) * dx * .5f;
	float d2 = (m - 1) * dx * .5f;

	for (UINT i = 0; i < m; i++)
	{
		float z = d2 - (float)i * dx;

		for (UINT k = 0; k < n; k++)
		{
			float x = -w2 + k * dx;

			prev[i * n + k] = WaterVertexType();
			prev[i * n + k].position = D3DXVECTOR3(x, 0, z);
			prev[i * n + k].normal = D3DXVECTOR3(0, 1, 0);

			current[i * n + k] = WaterVertexType();
			current[i * n + k].position = D3DXVECTOR3(x, 0, z);
			current[i * n + k].normal = D3DXVECTOR3(0, 1, 0);

			tangents[i * n + k] = D3DXVECTOR3(1, 0, 0);
		}
	}
}

Landscape::WaveVertex::~WaveVertex()
{

}

void Landscape::WaveVertex::Update()
{
	t += Time::Delta();

	if (t < timeStep) return;

	for (UINT y = 1; y < rowCount - 1; y++)
	{
		for (UINT x = 1; x < colCount - 1; x++)
		{
			float temp	= k[0] * prev[x + y * colCount].position.y;
			float temp1 = k[1] * current[x + y * colCount].position.y;

			float temp2 = 0.0f;
			
			temp2 += current[(y + 1) * colCount + x].position.y;
			temp2 += current[(y - 1) * colCount + x].position.y;
			temp2 += current[y * colCount + (x + 1)].position.y;
			temp2 += current[y * colCount + (x - 1)].position.y;
			temp2 *= k[2];
					
			prev[y * colCount + x].position.y = temp + temp1 + temp2;
		}
	}

	swap(current, prev);

	t = 0.0f;
	for (UINT y = 1; y < rowCount - 1; y++)
	{
		for (UINT x = 1; x < colCount - 1; x++)
		{
			float left	 = current[y	   * colCount + x - 1].position.y;
			float right  = current[y	   * colCount + x + 1].position.y;
			float top	 = current[(y - 1) * colCount + x	 ].position.y;
			float bottom = current[(y + 1) * colCount + x	 ].position.y;

			D3DXVECTOR3 normal = D3DXVECTOR3();
			normal.x = -right + left;
			normal.y = 2.0f * spatialStep;
			normal.z = bottom - top;
		
			D3DXVec3Normalize(&current[y * colCount + x].normal, &normal);

			D3DXVECTOR3 vec;
			vec.x = 2.0f * spatialStep;
			vec.y = right - left;
			vec.z = 0.0f;

			D3DXVec3Normalize(&tangents[y *  colCount + x], &vec);
		}
	}

}

void Landscape::WaveVertex::Disturb(UINT x, UINT y, float magnitude)
{
	current[(y + 1) * colCount + x].position.y += magnitude;

	float m2 = 0.5f * magnitude;
	current[ y	    * colCount + x + 1].position.y += m2;
	current[ y	    * colCount + x - 1].position.y += m2;
	current[(y + 1) * colCount + x    ].position.y += m2;
	current[(y - 1) * colCount + x    ].position.y += m2;

}

Landscape::Wave::Wave(ExecuteValues * values)
	: values(values)
	, theta(1.5f * (float)D3DX_PI)
	, phi(0.1f * (float)D3DX_PI)
	, radius(200.0f)
	, time(0)
	, position(0,2,0)
	, vertexBuffer(NULL), indexBuffer(NULL)
	, width(50), height(50)
{
	Clear();

	material = new Material(Shaders + L"002_Wave.hlsl");
	material->SetDiffuseMap(Contents + L"Landscape/Dirt3.png");
	worldBuffer = new WorldBuffer();

	FillVertices();
	CreateBuffer();

	D3DXMatrixIdentity(&world);

	{
		D3D11_RASTERIZER_DESC desc;
		States::GetRasterizerDesc(&desc);

		States::CreateRasterizer(&desc, &rasterizer[0]);

		desc.FillMode = D3D11_FILL_WIREFRAME;
		States::CreateRasterizer(&desc, &rasterizer[1]);
	}

	vertexData = new WaveVertex(width + 1, height + 1, 0.8f, 0.03f, 3.25f, 0.4f);
}

Landscape::Wave::~Wave()
{
	Clear();

	SAFE_RELEASE(rasterizer[0]);
	SAFE_RELEASE(rasterizer[1]);

	SAFE_DELETE(worldBuffer);
	SAFE_DELETE(material);
	SAFE_DELETE(vertexData);

}

void Landscape::Wave::Update()
{
	if ((Time::Get()->Running() - time) >= 0.25f)
	{
		time += .25f;

		UINT x = rand() % (width - 10) + 5 ;
		UINT y = rand() % (height - 10) + 5 ;

		float r = 1.0f + float(rand() / float(rand() / (2.0f - 1.0f)));
		vertexData->Disturb(x, y, r);
	}
	vertexData->Update();

	D3D11_MAPPED_SUBRESOURCE subResource;
	HRESULT hr = D3D::GetDC()->Map
	(
		vertexBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &subResource
	);
	memcpy(subResource.pData, &vertexData->current[0], sizeof(WaterVertexType) * vertexData->vertexCount);
	D3D::GetDC()->Unmap(vertexBuffer, 0);

	

	D3DXMATRIX T;

	D3DXMatrixTranslation(&T, position.x, position.y, position.z);
	worldBuffer->SetMatrix(T);
}

void Landscape::Wave::Render()
{
	UINT stride = sizeof(WaterVertexType);
	UINT offset = 0;

	D3D::GetDC()->IASetVertexBuffers(0, 1, &vertexBuffer, &stride, &offset);
	D3D::GetDC()->IASetIndexBuffer(indexBuffer, DXGI_FORMAT_R32_UINT, 0);
	D3D::GetDC()->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

	worldBuffer->SetVSBuffer(1);
	material->SetBuffer();

//	D3D::GetDC()->RSSetState(rasterizer[1]);
//	{
		D3D::GetDC()->DrawIndexed(indices.size(), 0, 0);
//	}
//	D3D::GetDC()->RSSetState(rasterizer[0]);

}

void Landscape::Wave::PostRender()
{
}

void Landscape::Wave::Clear()
{
	vertices.clear();
	indices.clear();

	SAFE_RELEASE(vertexBuffer);
	SAFE_RELEASE(indexBuffer);
}

void Landscape::Wave::FillVertices()
{
	UINT vertexCount = (width + 1) * (height + 1);
	vertices.assign(vertexCount, WaterVertexType());


	UINT index = 0;
	for (UINT z = 0; z <= height; z++)
	{
		for (UINT x = 0; x <= width; x++)
		{
			vertices[index].position.x = (float)x;
			vertices[index].position.y = 0.0f;
			vertices[index].position.z = (float)z;

			vertices[index].color = D3DXCOLOR(1, 1, 1, 1);
			vertices[index].normal = D3DXVECTOR3(0, 0, 0);

			index++;
		}//for(x)
	}//for(y)	


	UINT indexCount = width * height * 6;
	indices.assign(indexCount, UINT());

	index = 0;
	for (UINT z = 0; z < height; z++)
	{
		for (UINT x = 0; x < width; x++)
		{
			indices[index + 0] = (width + 1) * z + x;
			indices[index + 1] = (width + 1) * (z + 1) + x;
			indices[index + 2] = (width + 1) * z + x + 1;
			indices[index + 3] = (width + 1) * z + x + 1;
			indices[index + 4] = (width + 1) * (z + 1) + x;
			indices[index + 5] = (width + 1) * (z + 1) + (x + 1);

			index += 6;
		}
	}
}

void Landscape::Wave::CreateBuffer()
{
	//VertexBuffer
	{
		D3D11_BUFFER_DESC desc = { 0 };
		desc.Usage = D3D11_USAGE_DYNAMIC;
		desc.ByteWidth = sizeof(WaterVertexType) * vertices.size();
		desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
		desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;

		D3D11_SUBRESOURCE_DATA data = { 0 };
		data.pSysMem = &vertices[0];

		HRESULT hr;
		hr = D3D::GetDevice()->CreateBuffer(&desc, &data, &vertexBuffer);
		assert(SUCCEEDED(hr));
	}

	//IndexBuffer
	{
		D3D11_BUFFER_DESC desc = { 0 };
		desc = { 0 };
		desc.Usage = D3D11_USAGE_IMMUTABLE;
		desc.ByteWidth = sizeof(UINT) * indices.size();
		desc.BindFlags = D3D11_BIND_INDEX_BUFFER;

		D3D11_SUBRESOURCE_DATA data = { 0 };
		data = { 0 };
		data.pSysMem = &indices[0];

		HRESULT hr;
		hr = D3D::GetDevice()->CreateBuffer(&desc, &data, &indexBuffer);
		assert(SUCCEEDED(hr));
	}
}


}